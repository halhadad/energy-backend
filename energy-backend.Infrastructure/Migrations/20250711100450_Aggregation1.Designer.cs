// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using energy_backend.Data;

#nullable disable

namespace energy_backend.Migrations
{
    [DbContext(typeof(EnergyDbContext))]
    [Migration("20250711100450_Aggregation1")]
    partial class Aggregation1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("energy_backend.Core.Entities.AggregatedEnergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodStartTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalKwh")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("AggregatedEnergies");
                });

            modelBuilder.Entity("energy_backend.Entities.Alert", b =>
                {
                    b.Property<Guid>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.HasKey("AlertId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("energy_backend.Entities.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("EnergyConsumption")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("energy_backend.Entities.Energy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float>("CurrentConsumption")
                        .HasColumnType("real");

                    b.Property<float>("TotalConsumption")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("Energies");
                });

            modelBuilder.Entity("energy_backend.Entities.EnergyReading", b =>
                {
                    b.Property<Guid>("EnergyReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("EnergyValue")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EnergyReadingId");

                    b.HasIndex("DeviceId");

                    b.ToTable("EnergyReadings");
                });

            modelBuilder.Entity("energy_backend.Entities.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("EnergyBudget")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("energy_backend.Entities.Setting", b =>
                {
                    b.Property<Guid>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BudgetAlerts")
                        .HasColumnType("bit");

                    b.Property<Guid>("FavoriteOrg")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PeakAlerts")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("UnusualAlerts")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SettingId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("energy_backend.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("energy_backend.Core.Entities.AggregatedEnergy", b =>
                {
                    b.HasOne("energy_backend.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("energy_backend.Entities.Alert", b =>
                {
                    b.HasOne("energy_backend.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("energy_backend.Entities.Device", b =>
                {
                    b.HasOne("energy_backend.Entities.Organisation", "Organisation")
                        .WithMany("Devices")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("energy_backend.Entities.EnergyReading", b =>
                {
                    b.HasOne("energy_backend.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("energy_backend.Entities.Organisation", b =>
                {
                    b.HasOne("energy_backend.Entities.User", "User")
                        .WithMany("Organisations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("energy_backend.Entities.Setting", b =>
                {
                    b.HasOne("energy_backend.Entities.User", "User")
                        .WithOne("Setting")
                        .HasForeignKey("energy_backend.Entities.Setting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("energy_backend.Entities.Organisation", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("energy_backend.Entities.User", b =>
                {
                    b.Navigation("Organisations");

                    b.Navigation("Setting");
                });
#pragma warning restore 612, 618
        }
    }
}
